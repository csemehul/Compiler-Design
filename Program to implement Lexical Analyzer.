#include <stdio.h>
#include <ctype.h>
#include <stdbool.h>
#include <string.h>

// Token types
typedef enum {
    TOKEN_IDENTIFIER,
    TOKEN_NUMBER,
    TOKEN_OPERATOR,
    TOKEN_UNKNOWN
} TokenType;

// Token structure
typedef struct {
    TokenType type;
    char value[100];
} Token;

// Function to check if a character is an operator
bool is_operator(char c) {
    return c == '+' || c == '-' || c == '*' || c == '/';
}

// Function to check if a character is a digit
bool is_digit(char c) {
    return c >= '0' && c <= '9';
}

// Function to analyze a string and generate tokens
void analyze(const char *input) {
    int length = strlen(input);
    int i = 0;

    while (i < length) {
        if (isspace(input[i])) {
            i++; // Skip whitespace
        } else if (isalpha(input[i])) {
            // Identifier
            Token token;
            token.type = TOKEN_IDENTIFIER;
            int j = 0;
            while (isalnum(input[i])) {
                token.value[j++] = input[i++];
            }
            token.value[j] = '\0';
            printf("Identifier: %s\n", token.value);
        } else if (is_digit(input[i])) {
            // Number
            Token token;
            token.type = TOKEN_NUMBER;
            int j = 0;
            while (is_digit(input[i])) {
                token.value[j++] = input[i++];
            }
            token.value[j] = '\0';
            printf("Number: %s\n", token.value);
        } else if (is_operator(input[i])) {
            // Operator
            Token token;
            token.type = TOKEN_OPERATOR;
            token.value[0] = input[i++];
            token.value[1] = '\0';
            printf("Operator: %s\n", token.value);
        } else {
            // Unknown token
            Token token;
            token.type = TOKEN_UNKNOWN;
            token.value[0] = input[i++];
            token.value[1] = '\0';
            printf("Unknown: %s\n", token.value);
        }
    }
}

int main() {
    const char *input = "x = 10 + y * 2";
    analyze(input);
    return 0;
}
